const count = process.argv.length - 2;
const first = process.argv[2];
const second = process.argv[3];
const third = process.argv[4];
const fourth = process.argv[5];

function isFirstHelp() {
    return first === "--help";
}

function isFirstVersion() {
    return first === "--version";
}

function isFirstFC() {
    return first === "fc";
}

function isFirstCC() {
    return first === "cc";
}

function isFirstUtil() {
    return first === "util";
}

function isFirstModel() {
    return first === "model";
}

function isFirstService() {
    return first === "service";
}

function isThirdScss() {
    return third === "--scss";
}

function isThirdModule() {
    return third === "--module";
}

function isThirdProps() {
    return third === "--props";
}

function isThirdState() {
    return third === "--state";
}

function isFourthScss() {
    return fourth === "--scss";
}

function isFourthModule() {
    return fourth === "--module";
}

function isFourthProps() {
    return fourth === "--props";
}

function isFourthState() {
    return fourth === "--state";
}

function containScss() {
    return isThirdScss() || isFourthScss();
}

function containModule() {
    return isThirdModule() || isFourthModule();
}

function containProps() {
    return isThirdProps() || isFourthProps();
}

function containState() {
    return isThirdState() || isFourthState();
}

function containPropsScss() {
    return containProps() && containScss();
}

function containPropsModule() {
    return containProps() && containModule();
}

function containPropsState() {
    return containProps() && containState();
}

function getComponentName() {
    const parts = second.split("/");
    return parts[parts.length - 1];
}

function getUtilName() {
    const parts = second.split("/");
    return parts[parts.length - 1];
}

function getModelName() {
    const parts = second.split("/");
    return parts[parts.length - 1];
}

function getServiceName() {
    const parts = second.split("/");
    return parts[parts.length - 1];
}

function getEntityDefaultFolderName() {
    if(isFirstModel()) return "Models";
    if(isFirstService()) return "Services";
    if(isFirstUtil()) return "Utils";
    return "Components";
}

function getComponentFolderCompletePath() {
    return "./src" + (second[0] === "/" ? second : "/Components/" + second);
}

function getUtilFolderCompletePath() {
    const parents = second.lastIndexOf("/") >= 1 ? second.substr(0, second.lastIndexOf("/")) : (second[0] === "/" ? "/" : "");
    const completePath = "./src" + (parents[0] === "/" ? parents : "/Utils/" + parents);
    return completePath.endsWith("/") ? completePath.substr(0, completePath.length - 1) : completePath;
}

function getModelFolderCompletePath() {
    const parents = second.lastIndexOf("/") >= 1 ? second.substr(0, second.lastIndexOf("/")) : (second[0] === "/" ? "/" : "");
    const completePath = "./src" + (parents[0] === "/" ? parents : "/Models/" + parents);
    return completePath.endsWith("/") ? completePath.substr(0, completePath.length - 1) : completePath;
}

function getServiceFolderCompletePath() {
    const parents = second.lastIndexOf("/") >= 1 ? second.substr(0, second.lastIndexOf("/")) : (second[0] === "/" ? "/" : "");
    const completePath = "./src" + (parents[0] === "/" ? parents : "/Services/" + parents);
    return completePath.endsWith("/") ? completePath.substr(0, completePath.length - 1) : completePath;
}

function getCssCompletePath() {
    return getComponentFolderCompletePath() + "/" + getComponentName() + ".css";
}

function getScssCompletePath() {
    return getComponentFolderCompletePath() + "/" + getComponentName() + ".scss";
}

function getModuleCompletePath() {
    return getComponentFolderCompletePath() + "/" + getComponentName() + ".module.css";
}

function getTsxCompletePath() {
    return getComponentFolderCompletePath() + "/" + getComponentName() + ".tsx";
}

function getUtilTsCompletePath() {
    return getUtilFolderCompletePath() + "/" + getUtilName() + ".ts";
}

function getModelTsCompletePath() {
    return getModelFolderCompletePath() + "/" + getModelName() + ".ts";
}

function getServiceTsCompletePath() {
    return getServiceFolderCompletePath() + "/" + getServiceName() + ".ts";
}

module.exports = {
    count, first, second, third, fourth,
    isFirstHelp, isFirstVersion, isFirstFC, isFirstCC, isFirstUtil, isFirstModel, isFirstService, isThirdScss, isThirdModule, isThirdProps, isThirdState, isFourthScss, isFourthModule, isFourthProps, isFourthState,
    containScss, containModule ,containProps, containState, containPropsScss, containPropsModule, containPropsState,
    getComponentName, getUtilName, getModelName, getServiceName, getEntityDefaultFolderName, getComponentFolderCompletePath, getUtilFolderCompletePath, getModelFolderCompletePath, getServiceFolderCompletePath, getCssCompletePath, getScssCompletePath, getModuleCompletePath, getTsxCompletePath, getUtilTsCompletePath, getModelTsCompletePath, getServiceTsCompletePath
};
