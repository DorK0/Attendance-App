{"ast":null,"code":"import { Notyf } from \"notyf\"; // npm i notyf\n\nclass NotifyService {\n  constructor() {\n    this.notification = new Notyf({\n      duration: 3000,\n      position: {\n        x: \"center\",\n        y: \"top\"\n      }\n    });\n  }\n  success(message) {\n    this.notification.success(message);\n  }\n  error(err) {\n    this.notification.error(this.extractError(err));\n  }\n  extractError(err) {\n    var _err$response, _err$response2;\n    // throw \"some error...\"\n    if (typeof err === \"string\") return err;\n\n    // axios reporting a single error from backend:\n    if (typeof ((_err$response = err.response) === null || _err$response === void 0 ? void 0 : _err$response.data) === \"string\") return err.response.data;\n\n    // axios reporting an array of errors from backend:\n    if (Array.isArray((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : _err$response2.data)) return err.response.data[0];\n\n    // throw new Error(...) - must be lats\n    if (typeof err.message === \"string\") return err.message;\n\n    // Non of the above\n    return \"Some error, please try again.\";\n  }\n}\nconst notifyService = new NotifyService();\nexport default notifyService;","map":{"version":3,"names":["Notyf","NotifyService","constructor","notification","duration","position","x","y","success","message","error","err","extractError","_err$response","_err$response2","response","data","Array","isArray","notifyService"],"sources":["/Users/doritkiron/Downloads/Vacations Project - Dor Kiron/Frontend/src/Services/NotifyService.ts"],"sourcesContent":["import { Notyf } from \"notyf\"; // npm i notyf\r\n\r\nclass NotifyService {\r\n\r\n    private notification = new Notyf({ duration: 3000, position: { x: \"center\", y: \"top\" } });\r\n\r\n    public success(message: string): void {\r\n        this.notification.success(message);\r\n    }\r\n\r\n    public error(err: any): void {\r\n        this.notification.error(this.extractError(err));\r\n    }\r\n\r\n    private extractError(err: any): string {\r\n\r\n        // throw \"some error...\"\r\n        if (typeof err === \"string\") return err;\r\n\r\n        // axios reporting a single error from backend:\r\n        if (typeof err.response?.data === \"string\") return err.response.data;\r\n\r\n        // axios reporting an array of errors from backend:\r\n        if (Array.isArray(err.response?.data)) return err.response.data[0];\r\n\r\n        // throw new Error(...) - must be lats\r\n        if (typeof err.message === \"string\") return err.message;\r\n\r\n        // Non of the above\r\n        return \"Some error, please try again.\";\r\n    }\r\n\r\n}\r\n\r\nconst notifyService = new NotifyService();\r\n\r\nexport default notifyService;"],"mappings":"AAAA,SAASA,KAAK,QAAQ,OAAO,CAAC,CAAC;;AAE/B,MAAMC,aAAa,CAAC;EAAAC,YAAA;IAAA,KAERC,YAAY,GAAG,IAAIH,KAAK,CAAC;MAAEI,QAAQ,EAAE,IAAI;MAAEC,QAAQ,EAAE;QAAEC,CAAC,EAAE,QAAQ;QAAEC,CAAC,EAAE;MAAM;IAAE,CAAC,CAAC;EAAA;EAElFC,OAAOA,CAACC,OAAe,EAAQ;IAClC,IAAI,CAACN,YAAY,CAACK,OAAO,CAACC,OAAO,CAAC;EACtC;EAEOC,KAAKA,CAACC,GAAQ,EAAQ;IACzB,IAAI,CAACR,YAAY,CAACO,KAAK,CAAC,IAAI,CAACE,YAAY,CAACD,GAAG,CAAC,CAAC;EACnD;EAEQC,YAAYA,CAACD,GAAQ,EAAU;IAAA,IAAAE,aAAA,EAAAC,cAAA;IAEnC;IACA,IAAI,OAAOH,GAAG,KAAK,QAAQ,EAAE,OAAOA,GAAG;;IAEvC;IACA,IAAI,SAAAE,aAAA,GAAOF,GAAG,CAACI,QAAQ,cAAAF,aAAA,uBAAZA,aAAA,CAAcG,IAAI,MAAK,QAAQ,EAAE,OAAOL,GAAG,CAACI,QAAQ,CAACC,IAAI;;IAEpE;IACA,IAAIC,KAAK,CAACC,OAAO,EAAAJ,cAAA,GAACH,GAAG,CAACI,QAAQ,cAAAD,cAAA,uBAAZA,cAAA,CAAcE,IAAI,CAAC,EAAE,OAAOL,GAAG,CAACI,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC;;IAElE;IACA,IAAI,OAAOL,GAAG,CAACF,OAAO,KAAK,QAAQ,EAAE,OAAOE,GAAG,CAACF,OAAO;;IAEvD;IACA,OAAO,+BAA+B;EAC1C;AAEJ;AAEA,MAAMU,aAAa,GAAG,IAAIlB,aAAa,CAAC,CAAC;AAEzC,eAAekB,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}