{"ast":null,"code":"import jwtDecode from \"jwt-decode\";\n// 1. State\nexport class AuthState {\n  constructor() {\n    this.token = null;\n    this.user = null;\n    this.users = void 0;\n    this.token = sessionStorage.getItem(\"token\"); // Restore token from storage.\n    if (this.token) {\n      this.user = jwtDecode(this.token).user;\n    }\n  }\n}\n\n// 2. Action Type\nexport let AuthActionType = /*#__PURE__*/function (AuthActionType) {\n  AuthActionType[\"Login\"] = \"Login\";\n  AuthActionType[\"Logout\"] = \"Logout\";\n  AuthActionType[\"getAllUsers\"] = \"gerAllUsers\";\n  return AuthActionType;\n}({});\n\n// 3. Action\n\n// 4. Action Creators\nexport function loginAction(token) {\n  const action = {\n    type: AuthActionType.Login,\n    payload: token\n  };\n  return action;\n}\nexport function logoutAction() {\n  const action = {\n    type: AuthActionType.Logout\n  };\n  return action;\n}\nexport function getAllEmployeesAction(users) {\n  const action = {\n    type: AuthActionType.getAllUsers,\n    payload: users\n  };\n  return action;\n}\n// 5. Reducer\nexport function authReducer(currentState = new AuthState(), action) {\n  const newState = {\n    ...currentState\n  };\n  switch (action.type) {\n    case AuthActionType.Login:\n      const token = action.payload;\n      newState.token = token;\n      newState.user = jwtDecode(token).user;\n      sessionStorage.setItem(\"token\", token); // Save token in storage.\n      break;\n    case AuthActionType.Logout:\n      newState.token = null;\n      newState.user = null;\n      sessionStorage.removeItem(\"token\"); // Clear token from storage.\n      break;\n    case AuthActionType.getAllUsers:\n      newState.users = action.payload;\n      break;\n  }\n  return newState;\n}","map":{"version":3,"names":["jwtDecode","AuthState","constructor","token","user","users","sessionStorage","getItem","AuthActionType","loginAction","action","type","Login","payload","logoutAction","Logout","getAllEmployeesAction","getAllUsers","authReducer","currentState","newState","setItem","removeItem"],"sources":["/Users/doritkiron/Downloads/Vacations Project - Dor Kiron/Frontend/src/Redux/AuthState.ts"],"sourcesContent":["import jwtDecode from \"jwt-decode\";\r\nimport UserModel from \"../Models/UserModel\";\r\n\r\n// 1. State\r\nexport class AuthState {\r\n\r\n    public token: string = null;\r\n    public user: UserModel = null;\r\n    public users: UserModel[];\r\n\r\n    public constructor() {\r\n        this.token = sessionStorage.getItem(\"token\"); // Restore token from storage.\r\n        if (this.token) {\r\n            this.user = (jwtDecode(this.token) as any).user;\r\n        }\r\n    }\r\n}\r\n\r\n// 2. Action Type\r\nexport enum AuthActionType {\r\n    Login = \"Login\",\r\n    Logout = \"Logout\",\r\n    getAllUsers = \"gerAllUsers\"\r\n}\r\n\r\n// 3. Action\r\nexport interface AuthAction {\r\n    type: AuthActionType;\r\n    payload?: any;\r\n}\r\n\r\n// 4. Action Creators\r\nexport function loginAction(token: string): AuthAction {\r\n    const action: AuthAction = { type: AuthActionType.Login, payload: token };\r\n    return action;\r\n}\r\nexport function logoutAction(): AuthAction {\r\n    const action: AuthAction = { type: AuthActionType.Logout };\r\n    return action;\r\n}\r\nexport function getAllEmployeesAction(users: UserModel[]): AuthAction {\r\n    const action: AuthAction = { type: AuthActionType.getAllUsers, payload: users };\r\n    return action;\r\n}\r\n// 5. Reducer\r\nexport function authReducer(currentState = new AuthState(), action: AuthAction): AuthState {\r\n\r\n    const newState = { ...currentState };\r\n\r\n    switch (action.type) {\r\n        case AuthActionType.Login:\r\n            const token = action.payload;\r\n            newState.token = token;\r\n            newState.user = (jwtDecode(token) as any).user;\r\n            sessionStorage.setItem(\"token\", token); // Save token in storage.\r\n            break;\r\n        case AuthActionType.Logout:\r\n            newState.token = null;\r\n            newState.user = null;\r\n            sessionStorage.removeItem(\"token\"); // Clear token from storage.\r\n            break;\r\n            case AuthActionType.getAllUsers:\r\n                newState.users = action.payload;\r\n                break;\r\n    }\r\n\r\n    return newState;\r\n\r\n}\r\n"],"mappings":"AAAA,OAAOA,SAAS,MAAM,YAAY;AAGlC;AACA,OAAO,MAAMC,SAAS,CAAC;EAMZC,WAAWA,CAAA,EAAG;IAAA,KAJdC,KAAK,GAAW,IAAI;IAAA,KACpBC,IAAI,GAAc,IAAI;IAAA,KACtBC,KAAK;IAGR,IAAI,CAACF,KAAK,GAAGG,cAAc,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;IAC9C,IAAI,IAAI,CAACJ,KAAK,EAAE;MACZ,IAAI,CAACC,IAAI,GAAIJ,SAAS,CAAC,IAAI,CAACG,KAAK,CAAC,CAASC,IAAI;IACnD;EACJ;AACJ;;AAEA;AACA,WAAYI,cAAc,0BAAdA,cAAc;EAAdA,cAAc;EAAdA,cAAc;EAAdA,cAAc;EAAA,OAAdA,cAAc;AAAA;;AAM1B;;AAMA;AACA,OAAO,SAASC,WAAWA,CAACN,KAAa,EAAc;EACnD,MAAMO,MAAkB,GAAG;IAAEC,IAAI,EAAEH,cAAc,CAACI,KAAK;IAAEC,OAAO,EAAEV;EAAM,CAAC;EACzE,OAAOO,MAAM;AACjB;AACA,OAAO,SAASI,YAAYA,CAAA,EAAe;EACvC,MAAMJ,MAAkB,GAAG;IAAEC,IAAI,EAAEH,cAAc,CAACO;EAAO,CAAC;EAC1D,OAAOL,MAAM;AACjB;AACA,OAAO,SAASM,qBAAqBA,CAACX,KAAkB,EAAc;EAClE,MAAMK,MAAkB,GAAG;IAAEC,IAAI,EAAEH,cAAc,CAACS,WAAW;IAAEJ,OAAO,EAAER;EAAM,CAAC;EAC/E,OAAOK,MAAM;AACjB;AACA;AACA,OAAO,SAASQ,WAAWA,CAACC,YAAY,GAAG,IAAIlB,SAAS,CAAC,CAAC,EAAES,MAAkB,EAAa;EAEvF,MAAMU,QAAQ,GAAG;IAAE,GAAGD;EAAa,CAAC;EAEpC,QAAQT,MAAM,CAACC,IAAI;IACf,KAAKH,cAAc,CAACI,KAAK;MACrB,MAAMT,KAAK,GAAGO,MAAM,CAACG,OAAO;MAC5BO,QAAQ,CAACjB,KAAK,GAAGA,KAAK;MACtBiB,QAAQ,CAAChB,IAAI,GAAIJ,SAAS,CAACG,KAAK,CAAC,CAASC,IAAI;MAC9CE,cAAc,CAACe,OAAO,CAAC,OAAO,EAAElB,KAAK,CAAC,CAAC,CAAC;MACxC;IACJ,KAAKK,cAAc,CAACO,MAAM;MACtBK,QAAQ,CAACjB,KAAK,GAAG,IAAI;MACrBiB,QAAQ,CAAChB,IAAI,GAAG,IAAI;MACpBE,cAAc,CAACgB,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC;MACpC;IACA,KAAKd,cAAc,CAACS,WAAW;MAC3BG,QAAQ,CAACf,KAAK,GAAGK,MAAM,CAACG,OAAO;MAC/B;EACZ;EAEA,OAAOO,QAAQ;AAEnB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}