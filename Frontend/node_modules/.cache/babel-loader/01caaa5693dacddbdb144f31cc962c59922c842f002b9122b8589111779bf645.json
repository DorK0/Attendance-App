{"ast":null,"code":"import axios from \"axios\";\nimport CredentialsModel from \"../Models/CredentialsModel\";\nimport { loginAction, logoutAction } from \"../Redux/AuthState\";\nimport store from \"../Redux/Store\";\nimport config from \"../Utils/Config\";\nclass AuthService {\n  async register(user) {\n    const response = await axios.post(config.registerUrl, user);\n    const credentials = new CredentialsModel(user.username, user.password);\n    await this.login(credentials);\n  }\n  async login(credentials) {\n    const response = await axios.post(config.loginUrl, credentials);\n    const token = response.data;\n    store.dispatch(loginAction(token));\n  }\n  logout() {\n    store.dispatch(logoutAction());\n  }\n  isLoggedIn() {\n    return store.getState().authState.token !== null;\n  }\n  isAdmin() {\n    var _store$getState$authS;\n    return ((_store$getState$authS = store.getState().authState.user) === null || _store$getState$authS === void 0 ? void 0 : _store$getState$authS.role) === \"Admin\";\n  }\n}\nconst authService = new AuthService();\nexport default authService;","map":{"version":3,"names":["axios","CredentialsModel","loginAction","logoutAction","store","config","AuthService","register","user","response","post","registerUrl","credentials","username","password","login","loginUrl","token","data","dispatch","logout","isLoggedIn","getState","authState","isAdmin","_store$getState$authS","role","authService"],"sources":["/Users/doritkiron/Downloads/Vacations Project - Dor Kiron/Frontend/src/Services/AuthService.ts"],"sourcesContent":["import axios from \"axios\";\r\nimport CredentialsModel from \"../Models/CredentialsModel\";\r\nimport UserModel from \"../Models/UserModel\";\r\nimport { loginAction, logoutAction, registerAction } from \"../Redux/AuthState\";\r\nimport store from \"../Redux/Store\";\r\nimport config from \"../Utils/Config\";\r\n\r\nclass AuthService {\r\n\r\n    public async register(user: UserModel): Promise<void> {\r\n        const response = await axios.post<string>(config.registerUrl, user);\r\n        const credentials = new CredentialsModel(user.username, user.password);\r\n        await this.login(credentials);\r\n    }\r\n\r\n    public async login(credentials: CredentialsModel): Promise<void> {\r\n        const response = await axios.post<string>(config.loginUrl, credentials);\r\n        const token = response.data;\r\n        store.dispatch(loginAction(token));\r\n    }\r\n\r\n    public logout(): void {\r\n        store.dispatch(logoutAction());\r\n    }\r\n\r\n    public gelAllEmployess()\r\n\r\n    public isLoggedIn(): boolean {\r\n        return store.getState().authState.token !== null;\r\n    }\r\n\r\n    public isAdmin(): boolean {\r\n        return store.getState().authState.user?.role === \"Admin\";\r\n    }\r\n}\r\n\r\nconst authService = new AuthService();\r\n\r\nexport default authService;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,gBAAgB,MAAM,4BAA4B;AAEzD,SAASC,WAAW,EAAEC,YAAY,QAAwB,oBAAoB;AAC9E,OAAOC,KAAK,MAAM,gBAAgB;AAClC,OAAOC,MAAM,MAAM,iBAAiB;AAEpC,MAAMC,WAAW,CAAC;EAEd,MAAaC,QAAQA,CAACC,IAAe,EAAiB;IAClD,MAAMC,QAAQ,GAAG,MAAMT,KAAK,CAACU,IAAI,CAASL,MAAM,CAACM,WAAW,EAAEH,IAAI,CAAC;IACnE,MAAMI,WAAW,GAAG,IAAIX,gBAAgB,CAACO,IAAI,CAACK,QAAQ,EAAEL,IAAI,CAACM,QAAQ,CAAC;IACtE,MAAM,IAAI,CAACC,KAAK,CAACH,WAAW,CAAC;EACjC;EAEA,MAAaG,KAAKA,CAACH,WAA6B,EAAiB;IAC7D,MAAMH,QAAQ,GAAG,MAAMT,KAAK,CAACU,IAAI,CAASL,MAAM,CAACW,QAAQ,EAAEJ,WAAW,CAAC;IACvE,MAAMK,KAAK,GAAGR,QAAQ,CAACS,IAAI;IAC3Bd,KAAK,CAACe,QAAQ,CAACjB,WAAW,CAACe,KAAK,CAAC,CAAC;EACtC;EAEOG,MAAMA,CAAA,EAAS;IAClBhB,KAAK,CAACe,QAAQ,CAAChB,YAAY,CAAC,CAAC,CAAC;EAClC;EAIOkB,UAAUA,CAAA,EAAY;IACzB,OAAOjB,KAAK,CAACkB,QAAQ,CAAC,CAAC,CAACC,SAAS,CAACN,KAAK,KAAK,IAAI;EACpD;EAEOO,OAAOA,CAAA,EAAY;IAAA,IAAAC,qBAAA;IACtB,OAAO,EAAAA,qBAAA,GAAArB,KAAK,CAACkB,QAAQ,CAAC,CAAC,CAACC,SAAS,CAACf,IAAI,cAAAiB,qBAAA,uBAA/BA,qBAAA,CAAiCC,IAAI,MAAK,OAAO;EAC5D;AACJ;AAEA,MAAMC,WAAW,GAAG,IAAIrB,WAAW,CAAC,CAAC;AAErC,eAAeqB,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}