{"ast":null,"code":"import axios from \"axios\";\nimport store from \"../Redux/Store\";\nimport authService from \"./AuthService\";\nclass InterceptorService {\n  createInterceptors() {\n    // Send token for each request: \n    axios.interceptors.request.use(request => {\n      if (authService.isLoggedIn()) {\n        request.headers = {\n          authorization: \"Bearer \" + store.getState().authState.token\n        };\n      }\n      return request;\n    });\n    axios.interceptors.request.use(request => {\n      if (authService.isAdmin()) {\n        request.headers = {\n          authorization: \"Bearer \" + store.getState().authState.token\n        };\n      }\n      return request;\n    });\n  }\n}\nconst interceptorService = new InterceptorService();\nexport default interceptorService;","map":{"version":3,"names":["axios","store","authService","InterceptorService","createInterceptors","interceptors","request","use","isLoggedIn","headers","authorization","getState","authState","token","isAdmin","interceptorService"],"sources":["/Users/doritkiron/Downloads/Vacations Project - Dor Kiron/Frontend/src/Services/InterceptorService.ts"],"sourcesContent":["import axios from \"axios\";\r\nimport store from \"../Redux/Store\";\r\nimport authService from \"./AuthService\";\r\n\r\nclass InterceptorService {\r\n\r\n    public createInterceptors(): void {\r\n\r\n        // Send token for each request: \r\n        axios.interceptors.request.use(request => {\r\n\r\n            if (authService.isLoggedIn()) {\r\n                request.headers = {\r\n                    authorization: \"Bearer \" + store.getState().authState.token\r\n                };\r\n            }\r\n\r\n            return request;\r\n\r\n        });\r\n\r\n        axios.interceptors.request.use(request => {\r\n\r\n            if (authService.isAdmin()) {\r\n                request.headers = {\r\n                    authorization: \"Bearer \" + store.getState().authState.token\r\n                }\r\n            }\r\n            return request;\r\n        })\r\n\r\n    }\r\n\r\n}\r\n\r\nconst interceptorService = new InterceptorService();\r\n\r\nexport default interceptorService;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,KAAK,MAAM,gBAAgB;AAClC,OAAOC,WAAW,MAAM,eAAe;AAEvC,MAAMC,kBAAkB,CAAC;EAEdC,kBAAkBA,CAAA,EAAS;IAE9B;IACAJ,KAAK,CAACK,YAAY,CAACC,OAAO,CAACC,GAAG,CAACD,OAAO,IAAI;MAEtC,IAAIJ,WAAW,CAACM,UAAU,CAAC,CAAC,EAAE;QAC1BF,OAAO,CAACG,OAAO,GAAG;UACdC,aAAa,EAAE,SAAS,GAAGT,KAAK,CAACU,QAAQ,CAAC,CAAC,CAACC,SAAS,CAACC;QAC1D,CAAC;MACL;MAEA,OAAOP,OAAO;IAElB,CAAC,CAAC;IAEFN,KAAK,CAACK,YAAY,CAACC,OAAO,CAACC,GAAG,CAACD,OAAO,IAAI;MAEtC,IAAIJ,WAAW,CAACY,OAAO,CAAC,CAAC,EAAE;QACvBR,OAAO,CAACG,OAAO,GAAG;UACdC,aAAa,EAAE,SAAS,GAAGT,KAAK,CAACU,QAAQ,CAAC,CAAC,CAACC,SAAS,CAACC;QAC1D,CAAC;MACL;MACA,OAAOP,OAAO;IAClB,CAAC,CAAC;EAEN;AAEJ;AAEA,MAAMS,kBAAkB,GAAG,IAAIZ,kBAAkB,CAAC,CAAC;AAEnD,eAAeY,kBAAkB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}